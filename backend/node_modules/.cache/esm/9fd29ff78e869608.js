let uploadPicture,User,fileRemover;_8e8‍.x([["registerUser",()=>registerUser],["loginUser",()=>loginUser],["UserProfile",()=>UserProfile],["updateProfile",()=>updateProfile],["updateProfilePicture",()=>updateProfilePicture]]);_8e8‍.w("../middleware/uploadPicture",[["uploadPicture",["uploadPicture"],function(v){uploadPicture=v}]]);_8e8‍.w("../models/User",[["default",["User"],function(v){User=v}]]);_8e8‍.w("../utils/fileRemover",[["fileRemover",["fileRemover"],function(v){fileRemover=v}]]);



       const registerUser = async (req,res,next) => {
  try {
    const {name,email,password} = req.body;
    
    let user = await User.findOne({email});
    if(user){
        throw new Error("User already exists");
    }
    user = await User.create({
        name,
        email,
        password,
    });

    return res.status(201).json({
      _id: user._id,
      avatar: user.avatar,
      name: user.name,
      email: user.email,
      verified: user.verified,
      admin: user.admin,
      token: await user.generateJWT(),
    });
  } catch(error) {
    next(error);
  }
}


       const loginUser = async(req,res,next) => {
  try {
    const {email,password} = req.body;

    let user = await User.findOne({email});

    if(!user){
      throw new Error("User not found");
    }

    if(await user.comparePassword(password)){
      return res.status(201).json({
        _id: user._id,
        avatar: user.avatar,
        name: user.name,
        email: user.email,
        verified: user.verified,
        admin: user.admin,
        token: await user.generateJWT(),
      });
    }
    else{
      throw new Error("Invalid Credentials");
    }
  } catch(error) {
     next(error);
  }
}

       const UserProfile = async(req,res,next) => {
  try {
    let user = await User.findById(req.user._id);
    if(user){
      return res.status(201).json({
        _id: user._id,
        avatar: user.avatar,
        name: user.name,
        email: user.email,
        verified: user.verified,
        admin: user.admin,
      });
    }
    else{
      let err = new Error("User not found");
      err.statusCode = 404;
      next(err);
    }
  } catch(error) {
    next(error);
  }
}

       const updateProfile = async (req,res,next) => {
  try {
    let user = await User.findById(req.user._id);
    if(!user){
      throw new Error("user not found")
    }

    user.name = req.body.name || user.name;
    user.email = req.body.email || user.email;

    if(req.body.password && req.body.password.length < 6){
      throw new Error("Password length must be 6 character");
    }
    else if(req.body.password){
      user.password = req.body.password;
    }
    
    const updateProfile = await user.save();

    res.json({
        _id: updateProfile._id,
        avatar: updateProfile.avatar,
        name: updateProfile.name,
        email: updateProfile.email,
        verified: updateProfile.verified,
        admin: updateProfile.admin,
        token: await updateProfile.generateJWT(),
    })
  } catch(error) {
    next(error);
  }
}

       const updateProfilePicture = async (req, res, next) => {
  try {
    const upload = uploadPicture.single("profilePicture");

    upload(req, res, async function (err) {
      if (err) {
        const error = new Error(
          "An unknown error occured when uploading " + err.message
        );
        next(error);
      } else {
        if (req.file) {
          let filename;
          let updatedUser = await User.findById(req.user._id);
          filename = updatedUser.avatar;
          if (filename) {
            fileRemover(filename);
          }
          updatedUser.avatar = req.file.filename;
          await updatedUser.save();
          res.json({
            _id: updatedUser._id,
            avatar: updatedUser.avatar,
            name: updatedUser.name,
            email: updatedUser.email,
            verified: updatedUser.verified,
            admin: updatedUser.admin,
            token: await updatedUser.generateJWT(),
          });
        } else {
          let filename;
          let updatedUser = await User.findById(req.user._id);
          filename = updatedUser.avatar;
          updatedUser.avatar = "";
          await updatedUser.save();
          fileRemover(filename);
          res.json({
            _id: updatedUser._id,
            avatar: updatedUser.avatar,
            name: updatedUser.name,
            email: updatedUser.email,
            verified: updatedUser.verified,
            admin: updatedUser.admin,
            token: await updatedUser.generateJWT(),
          });
        }
      }
    });
  } catch (error) {
    next(error);
  }
};